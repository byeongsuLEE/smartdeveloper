<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- 
	여기에 db연결을한다. root-context.xml에 db연결을한다. HikariCP를 통해서 db 연결한다. 
	Hikaricpconfig = 어떤 db데이터베이스를 쓸건지 설정 
	datasource class 를 사용하기위해서 xml에서는 <bean>을 사용한다. 
	<bean id = "a" class="A"/> = A a = new A() 
	//id 이름은 클래스의 이름의 첫짜를 소문자로 쓴다. 
	//driver이름 , url, db_id,ud_pw가 필요하기때문에 
	//porperty는 4개가필요합니다. 
	//hikariconfig 가 name을 읽어서 값을 꺼내간다. 
	//히카리 클래스에서 읽을 수 있는 이름만 가져갈수있다. //지정된 이름을 사용하자 -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<!-- 값은 com의 property에서 확인하자 url에서 프로토컬://서브포로토콜을 나타낸다 앞에 프로토컬은 절때 바뀌면안된다. 
			hikaricp는 jdbc driver를 통해서 db를 연결시킨다. 따라서 maven에 mysql.jdbc.driver를 설치해야 
			한다. 5.14 다운로드합시다 spring-jdbc는 spring버전에맞게 4.3.18를 설치합시다. -->
		<property name="driverClassName"
			value="com.mysql.jdbc.Driver" />
		<property name="jdbcUrl"
			value="jdbc:mysql://localhost:3306/com" />
		<property name="username" value="com" />
		<property name="password" value="com01" />


		<!-- hikariConfig 의 데이터를 가져와서(참조해서) db를 연결해줘야 됩니다. class A라는 config, class 
			b = datasource A a=new A(); B b =new B(); b.setA(a) ; 1. b.setA(a) = 의존성 
			주입뮤(Di) 2. public B(A a) this.a = a 생성자 주입(Di) property는 setter인데 hikaridatasource에는 
			setter를 쓸수있는 이름이없다. 2번인 생성자만 적용할 수 있다. <constructor-arg> = 생성자를 쓰겠다. -->
	</bean>
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource">
		<constructor-arg ref="hikariConfig">
		</constructor-arg>
	</bean>
	
	<!--
	BoardMapper.java와 BoardMapper.xml에서 전송해준
	select,delete 쿼리를 db와 연결해주는 것
	
	위의 datasource 커넥션과 mybatis와 연결을 해줘야된다.
	db api 커넥션을 어떤걸 쓸지 몰라서 생성자방법으로 연결을 하지않는다.
	dataSource 이름을 이용해서 연결한다.
	
	인퍼페이스클래스를 구현하기위해 쓰는 클래스이름이 바로 아래인 SqlSessionFactoryBean이다.
	이아래부분은 
	new SesiionFactory 이다.
	 -->
	 <bean class ="org.mybatis.spring.SqlSessionFactoryBean">
	 	<property name="dataSource" ref ="dataSource"/>
	 </bean>
	<!-- 	
	이 구현체가 찾아갈 인터페이스를 인식시켜주기 위한 자업
	SqlSessionFactroyBeandml의 인터페이스 (mapper)를 설정(scan) 
	BoardMapper mapper = new SqlSessionFactoryBean()" 부분이다
	List<Board> list = mapper.getList();
	 -->
	 <!--  
	 reposit 있는 인터페이스를 스캔한다.
	 scan은 xsd(스키마)에서는 없어서 따른 스키마를 가져와야합니다.
	 추가방법은 namespaces 탭으로 갑시다
	 mybatis-spring:scan 을 이용하여 인터페이스를 스캔합니다.
	  -->
	 <mybatis-spring:scan base-package="kr.smhrd.repository"/>
	 
</beans>
